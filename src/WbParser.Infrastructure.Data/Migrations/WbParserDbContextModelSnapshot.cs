// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WbParser.Infrastructure.Data;

namespace WbParser.Infrastructure.Data.Migrations
{
    [DbContext(typeof(WbParserDbContext))]
    partial class WbParserDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("WbParser.Domain.Entities.RatingByQueryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("DiffPrice")
                        .HasColumnType("boolean");

                    b.Property<long>("Feedbacks")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsNew")
                        .HasColumnType("boolean");

                    b.Property<long>("KindId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("Pics")
                        .HasColumnType("bigint");

                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.Property<long>("PriceU")
                        .HasColumnType("bigint");

                    b.Property<long?>("Promopic")
                        .HasColumnType("bigint");

                    b.Property<long>("Rating")
                        .HasColumnType("bigint");

                    b.Property<long>("Root")
                        .HasColumnType("bigint");

                    b.Property<long>("Sale")
                        .HasColumnType("bigint");

                    b.Property<long>("SalePriceU")
                        .HasColumnType("bigint");

                    b.Property<long>("SiteBrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("Brand");

                    b.HasIndex("IsNew");

                    b.HasIndex("Name");

                    b.HasIndex("SalePriceU");

                    b.ToTable("RatingByQueryEntities");
                });

            modelBuilder.Entity("WbParser.Domain.Entities.RatingSupportedProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId")
                        .IsUnique();

                    b.HasIndex("Inactive");

                    b.ToTable("RatingSupportedProductEntities");
                });

            modelBuilder.Entity("WbParser.Domain.Entities.RecommendQueryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CurrentCount")
                        .HasColumnType("integer");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("SubQuery")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Completed");

                    b.HasIndex("Query");

                    b.HasIndex("SubQuery");

                    b.HasIndex("Query", "SubQuery")
                        .IsUnique();

                    b.ToTable("RecommendQueries");
                });

            modelBuilder.Entity("WbParser.Domain.Entities.SyncRatingQueryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("SyncRatingQueryEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
